datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String         @id @default(cuid())
  uuid         String         @unique
  name         String         @default("No Name")
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  password     Password?
  avatar       String?
  files        File[]
  memos        Memo[]
  groups       Group[]        @relation("UserGroups")
  following    Follow[]       @relation("UserFollowing")
  followers    Follow[]       @relation("UserFollowers")
  Subscription Subscription[]
}

model Memo {
  id          String   @id @default(cuid())
  title       String
  color       String   @default("white")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?
  completed   Boolean  @default(false)
  place       String?
  latitude    Float?
  longitude   Float?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     String?
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memos     Memo[]
  users     User[]   @relation("UserGroups")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])

  // "PENDING", "ACCEPTED", "REJECTED"でフォロリク状態を管理
  status String @default("PENDING")

  createdAt DateTime @default(now())
}

model File {
  id           String @id @default(cuid())
  fileName     String
  objectName   String @unique
  downloadLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Subscription {
  id        Int      @id @default(autoincrement())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}
