datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  uuid          String         @unique
  name          String         @default("名無しの旅人")
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      Password?
  avatar        String?
  theme         String         @default("#4F46E5")
  bar           String         @default("bottom")
  files         File[]
  memos         Memo[]
  comments      Comment[]
  GroupMember   GroupMember[]
  groupRequests GroupRequest[]
  ownedGroups   Group[]        @relation("OwnerGroups")
  Subscription  Subscription[]
  from          Friend[]       @relation("From")
  to            Friend[]       @relation("To")
  tutorial      String         @default("false")
  map           String         @default("high")
}

model Memo {
  id          String   @id @default(cuid())
  title       String
  color       String   @default("white")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String?
  completed   Boolean  @default(false)
  place       String?
  latitude    Float?
  longitude   Float?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     String?
  comments    Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  color       String   @default("")
  createdAt   DateTime @default(now())
  memo        Memo     @relation(fields: [memoId], references: [id], onDelete: Cascade)
  memoId      String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
}

model Group {
  id            String         @id @default(cuid())
  name          String
  ownerId       String
  owner         User           @relation("OwnerGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  memos         Memo[]
  groupRequests GroupRequest[]
  memberships   GroupMember[]
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model GroupRequest {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  status    String   @default("PENDING") // "PENDING", "ACCEPTED", "REJECTED"
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupMember {
  id         String    @id @default(cuid())
  userId     String
  groupId    String
  role       Role      @default(VIEWER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group      Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Friend {
  id     String @id @default(cuid())
  fromId String
  toId   String
  from   User   @relation("From", fields: [fromId], references: [id], onDelete: Cascade)
  to     User   @relation("To", fields: [toId], references: [id], onDelete: Cascade)

  // "PENDING", "ACCEPTED", "REJECTED"でフォロリク状態を管理
  status String @default("PENDING")

  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model File {
  id           String @id @default(cuid())
  fileName     String
  objectName   String @unique
  downloadLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Subscription {
  id        Int      @id @default(autoincrement())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}
